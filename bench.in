#!/bin/bash
#vim: syn=bash

# Global environment
# Modify only by using bench_init
BENCH_COLOR=1
BENCH_DEFAULT_LOG=0
BENCH_COUNTER=0
BENCH_START=0

# Initialize (or reset) the benchmarking environment
#
# bench_init use_color default_log
bench_init() {
	BENCH_COLOR=$1
	BENCH_DEFAULT_LOG=$2
	BENCH_COUNTER=0
	BENCH_START=$(date +%s)
	return 0
}

# Add a benchmark to the benchmarking environment
#
# bench_add name runs cmd [inf] [outf] [errf]
bench_add() {
	local name
	if [ -n "$1" ]
	then
		name="$1"
	else
		name="#$((BENCH_COUNTER + 1))"
	fi

	declare -g "BENCH_NAME_$BENCH_COUNTER"="$name"
	declare -g -i "BENCH_RUNS_$BENCH_COUNTER"="$2"
	declare -g "BENCH_CMD_$BENCH_COUNTER"="$3"

	local inf=""
	if [ -n "$4" ]
	then
		inf="$4"
	fi

	local outf="/dev/null"
	if [ -n "$5" ]
	then
		outf="$5"
	elif [ "$BENCH_DEFAULT_LOG" -ne 0 ]
	then
		errf="bench.$name.log"
	fi

	local errf="/dev/null"
	if [ -n "$6" ]
	then
		errf="$6"
	elif [ "$BENCH_DEFAULT_LOG" -ne 0 ]
	then
		errf="bench.$name.log"
	fi

	declare -g "BENCH_INF_$BENCH_COUNTER"="$inf"
	declare -g "BENCH_OUTF_$BENCH_COUNTER"="$outf"
	declare -g "BENCH_ERRF_$BENCH_COUNTER"="$errf"

	((++BENCH_COUNTER))
	return 0
}

# Internal
#
# Calculate mean, population standard deviation and standard error
_bench_stat() {
	local data="$@"
	data="${data//\ /$'\n'}"
	local len=$(wc -w <<< "$data")

	_BENCH_MEAN=$(awk '{sum+=$1} END {print sum/NR}' <<< "$data")
	_BENCH_DEVIATION=$(awk "{sum+=(\$1-$_BENCH_MEAN)^2} END {print sqrt((1/NR)*sum)}" <<< "$data")
	_BENCH_ERROR=$(bc <<< "scale=4; tmp=$_BENCH_DEVIATION / sqrt($len); if (tmp>0 && tmp<1) print 0; tmp")
	return 0
}

# Internal
#
# Invoke to test _bench_stat on a defined set
# Numbers may vary a little depending on precision
_bench_test() {
	_bench_stat "0.556" "1.456" "45.111" "7.812" "5.001"

	echo -n "Mean test: "
	if (( $(bc <<< "$_BENCH_MEAN == 11.9872") ))
	then
		echo "PASS"
	else
		echo "FAIL"
	fi

	echo -n "Deviation test: "
	if (( $(bc <<< "$_BENCH_DEVIATION == 16.7631") ))
	then
		echo "PASS"
	else
		echo "FAIL"
	fi

	echo -n "Error test: "
	if (( $(bc <<< "$_BENCH_ERROR == 7.4969") ))
	then
		echo "PASS"
	else
		echo "FAIL"
	fi

	return 0
}

# Run benchmarks in the benchmarking environment
#
# bench_run
bench_run() {
	if [ "$BENCH_COUNTER" -eq 0 ]
	then
		return 1
	fi

	if [ "$BENCH_COLOR" -ne 0 ]
	then
		RED="\033[31m"
		GREEN="\033[32m"
		MAGENTA="\033[35m"
		CYAN="\033[36m"
		YELLOW="\033[33m"
		CLEAR="\033[0m"
		BOLD="\033[1m"
	else
		RED=""
		GREEN=""
		MAGENTA=""
		CYAN=""
		YELLOW=""
		CLEAN=""
		BOLD=""
	fi

	local old_format="$TIMEFORMAT"
	TIMEFORMAT="%3R %3U %3S"

	local fast_name=""
	local fast_time=$((2 ** 32))
	local fast_deviation=0

	local slow_name=""
	local slow_time=0
	local slow_deviation=0

	local today=$(date)
	local start=$(date +%s)

	for ((i=0; i < $BENCH_COUNTER; i++))
	do
		local name="BENCH_NAME_$i"
		local runs="BENCH_RUNS_$i"
		local cmd="BENCH_CMD_$i"
		local inf="BENCH_INF_$i"
		local outf="BENCH_OUTF_$i"
		local errf="BENCH_ERRF_$i"

		name="${!name}"
		runs="${!runs}"
		cmd="${!cmd}"
		inf="${!inf}"
		outf="${!outf}"
		errf="${!errf}"

		echo "==== Benchmark started on $today ====" >> "$outf"
		echo "==== Benchmark started on $today ====" >> "$errf"

		local cmd2="$cmd >>$outf 2>>$errf"
		if [ -n "$inf" ]
		then
			cmd2="cat $inf | $cmd2"
		fi
		cmd2="{ time $cmd2 ; } 2>&1"

		declare -a "real_times"
		declare -a "user_times"
		declare -a "sys_times"

		local errs=0
		for ((j=0; j < $runs; j++))
		do
			local tmp=$(eval "$cmd2"; echo $?)
			local tmp2=($tmp)

			real_times[j]=${tmp2[0]}
			user_times[j]=${tmp2[1]}
			sys_times[j]=${tmp2[2]}

			if [ "${tmp2[3]}" -ne 0 ]
			then
				((++errs))
			fi
		done

		echo -e "Benchmark $BOLD$name$CLEAR: \`$cmd\`"

		local real_sorted=($(sort -n <<< "${real_times[*]}"))
		local real_max=${real_sorted[$((runs - 1))]}
		local real_min=${real_sorted[0]}

		_bench_stat ${real_times[*]}
		local real_mean="$_BENCH_MEAN"
		local real_deviation="$_BENCH_DEVIATION"
		local real_error="$_BENCH_ERROR"

		echo -e "  Real time:"
		echo -e "    Range: $YELLOW$real_max$CLEAR s max ... $GREEN$real_min$CLEAR s min"
		echo -e "    Mean: $CYAN$real_mean$CLEAR s ± $MAGENTA$real_error$CLEAR s"
		echo -e "    Deviation: $MAGENTA$real_deviation$CLEAR s"
		echo -e "    Error: $MAGENTA$real_error$CLEAR s"

		local user_sorted=($(sort -n <<< "${user_times[*]}"))
		local user_max=${user_sorted[$((runs - 1))]}
		local user_min=${user_sorted[0]}

		_bench_stat ${user_times[*]}
		local user_mean="$_BENCH_MEAN"
		local user_deviation="$_BENCH_DEVIATION"
		local user_error="$_BENCH_ERROR"

		echo -e "  User time:"
		echo -e "    Range: $YELLOW$user_max$CLEAR s max ... $GREEN$user_min$CLEAR s min"
		echo -e "    Mean: $CYAN$user_mean$CLEAR s ± $MAGENTA$user_error$CLEAR s"
		echo -e "    Deviation: $MAGENTA$user_deviation$CLEAR s"
		echo -e "    Error: $MAGENTA$user_error$CLEAR s"

		local sys_sorted=($(sort -n <<< "${sys_times[*]}"))
		local sys_max=${sys_sorted[$((runs - 1))]}
		local sys_min=${sys_sorted[0]}

		_bench_stat ${sys_times[*]}
		local sys_mean="$_BENCH_MEAN"
		local sys_deviation="$_BENCH_DEVIATION"
		local sys_error="$_BENCH_ERROR"

		echo -e "  System time:"
		echo -e "    Range: $YELLOW$sys_max$CLEAR s max ... $GREEN$sys_min$CLEAR s min"
		echo -e "    Mean: $CYAN$sys_mean$CLEAR s ± $MAGENTA$sys_error$CLEAR s"
		echo -e "    Deviation: $MAGENTA$sys_deviation$CLEAR s"
		echo -e "    Error: $MAGENTA$sys_error$CLEAR s"

		local succs=$((runs - errs))
		echo -e "  Runs: $RED$errs$CLEAR errors, $GREEN$succs$CLEAR successes" \
				"over $BOLD$runs$CLEAR runs\n"

		if (( $(bc <<< "$real_mean <= $fast_time") ))
		then
			fast_name=$name
			fast_time=$real_mean
			fast_deviation=$real_error
		fi

		if (( $(bc <<< "$real_mean >= $slow_time") ))
		then
			slow_name=$name
			slow_time=$real_mean
			slow_deviation=$real_error
		fi
	done

	local end=$(date +%s)
	local total=$((end - start))
	local total2=$((end - BENCH_START))

	echo "Summary:"
	echo -e "  Fastest benchmark: $BOLD$fast_name$CLEAR, real time mean" \
			"$CYAN$fast_time$CLEAR s ± $MAGENTA$fast_deviation$CLEAR s"
	echo -e "  Slowest benchmark: $BOLD$slow_name$CLEAR, real time mean" \
			"$CYAN$slow_time$CLEAR s ± $MAGENTA$slow_deviation$CLEAR s"
	echo "  Total time:"
	echo -e "    Elapsed since run: $CYAN$total$CLEAR s"
	echo -e "    Elapsed since init: $CYAN$total2$CLEAR s"

	TIMEFORMAT=old_format
}
